/*
 * This file is generated by jOOQ.
 */
package space.crowdforce.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import space.crowdforce.model.Keys;
import space.crowdforce.model.Public;
import space.crowdforce.model.tables.records.ProjectSubscribersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectSubscribers extends TableImpl<ProjectSubscribersRecord> {

    private static final long serialVersionUID = -1477953730;

    /**
     * The reference instance of <code>public.project_subscribers</code>
     */
    public static final ProjectSubscribers PROJECT_SUBSCRIBERS = new ProjectSubscribers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectSubscribersRecord> getRecordType() {
        return ProjectSubscribersRecord.class;
    }

    /**
     * The column <code>public.project_subscribers.project_id</code>.
     */
    public final TableField<ProjectSubscribersRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.project_subscribers.user_id</code>.
     */
    public final TableField<ProjectSubscribersRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.project_subscribers</code> table reference
     */
    public ProjectSubscribers() {
        this(DSL.name("project_subscribers"), null);
    }

    /**
     * Create an aliased <code>public.project_subscribers</code> table reference
     */
    public ProjectSubscribers(String alias) {
        this(DSL.name(alias), PROJECT_SUBSCRIBERS);
    }

    /**
     * Create an aliased <code>public.project_subscribers</code> table reference
     */
    public ProjectSubscribers(Name alias) {
        this(alias, PROJECT_SUBSCRIBERS);
    }

    private ProjectSubscribers(Name alias, Table<ProjectSubscribersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectSubscribers(Name alias, Table<ProjectSubscribersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ProjectSubscribers(Table<O> child, ForeignKey<O, ProjectSubscribersRecord> key) {
        super(child, key, PROJECT_SUBSCRIBERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<ProjectSubscribersRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectSubscribersRecord>>asList(Keys.PROJECT_SUBSCRIBERS_USER_ID_PROJECT_ID_KEY);
    }

    @Override
    public List<ForeignKey<ProjectSubscribersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectSubscribersRecord, ?>>asList(Keys.PROJECT_SUBSCRIBERS__PROJECT_SUBSCRIBERS_PROJECT_ID_FKEY, Keys.PROJECT_SUBSCRIBERS__PROJECT_SUBSCRIBERS_USER_ID_FKEY);
    }

    public Projects projects() {
        return new Projects(this, Keys.PROJECT_SUBSCRIBERS__PROJECT_SUBSCRIBERS_PROJECT_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.PROJECT_SUBSCRIBERS__PROJECT_SUBSCRIBERS_USER_ID_FKEY);
    }

    @Override
    public ProjectSubscribers as(String alias) {
        return new ProjectSubscribers(DSL.name(alias), this);
    }

    @Override
    public ProjectSubscribers as(Name alias) {
        return new ProjectSubscribers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectSubscribers rename(String name) {
        return new ProjectSubscribers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectSubscribers rename(Name name) {
        return new ProjectSubscribers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
