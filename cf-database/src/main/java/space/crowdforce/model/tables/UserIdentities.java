/*
 * This file is generated by jOOQ.
 */
package space.crowdforce.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import space.crowdforce.model.Keys;
import space.crowdforce.model.Public;
import space.crowdforce.model.tables.records.UserIdentitiesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserIdentities extends TableImpl<UserIdentitiesRecord> {

    private static final long serialVersionUID = -1887974602;

    /**
     * The reference instance of <code>public.user_identities</code>
     */
    public static final UserIdentities USER_IDENTITIES = new UserIdentities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserIdentitiesRecord> getRecordType() {
        return UserIdentitiesRecord.class;
    }

    /**
     * The column <code>public.user_identities.identity_type</code>.
     */
    public final TableField<UserIdentitiesRecord, String> IDENTITY_TYPE = createField(DSL.name("identity_type"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.user_identities.identity_id</code>.
     */
    public final TableField<UserIdentitiesRecord, String> IDENTITY_ID = createField(DSL.name("identity_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.user_identities.user_id</code>.
     */
    public final TableField<UserIdentitiesRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.user_identities</code> table reference
     */
    public UserIdentities() {
        this(DSL.name("user_identities"), null);
    }

    /**
     * Create an aliased <code>public.user_identities</code> table reference
     */
    public UserIdentities(String alias) {
        this(DSL.name(alias), USER_IDENTITIES);
    }

    /**
     * Create an aliased <code>public.user_identities</code> table reference
     */
    public UserIdentities(Name alias) {
        this(alias, USER_IDENTITIES);
    }

    private UserIdentities(Name alias, Table<UserIdentitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserIdentities(Name alias, Table<UserIdentitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserIdentities(Table<O> child, ForeignKey<O, UserIdentitiesRecord> key) {
        super(child, key, USER_IDENTITIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserIdentitiesRecord> getPrimaryKey() {
        return Keys.USER_IDENTITIES_PKEY;
    }

    @Override
    public List<UniqueKey<UserIdentitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<UserIdentitiesRecord>>asList(Keys.USER_IDENTITIES_PKEY);
    }

    @Override
    public List<ForeignKey<UserIdentitiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserIdentitiesRecord, ?>>asList(Keys.USER_IDENTITIES__USER_IDENTITIES_USER_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.USER_IDENTITIES__USER_IDENTITIES_USER_ID_FKEY);
    }

    @Override
    public UserIdentities as(String alias) {
        return new UserIdentities(DSL.name(alias), this);
    }

    @Override
    public UserIdentities as(Name alias) {
        return new UserIdentities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserIdentities rename(String name) {
        return new UserIdentities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserIdentities rename(Name name) {
        return new UserIdentities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
