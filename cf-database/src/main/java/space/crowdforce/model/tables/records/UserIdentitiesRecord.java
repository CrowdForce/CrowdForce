/*
 * This file is generated by jOOQ.
 */
package space.crowdforce.model.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import space.crowdforce.model.tables.UserIdentities;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserIdentitiesRecord extends UpdatableRecordImpl<UserIdentitiesRecord> implements Record3<String, String, Integer> {

    private static final long serialVersionUID = 1583033673;

    /**
     * Setter for <code>public.user_identities.identity_type</code>.
     */
    public void setIdentityType(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.user_identities.identity_type</code>.
     */
    public String getIdentityType() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.user_identities.identity_id</code>.
     */
    public void setIdentityId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.user_identities.identity_id</code>.
     */
    public String getIdentityId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.user_identities.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.user_identities.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return UserIdentities.USER_IDENTITIES.IDENTITY_TYPE;
    }

    @Override
    public Field<String> field2() {
        return UserIdentities.USER_IDENTITIES.IDENTITY_ID;
    }

    @Override
    public Field<Integer> field3() {
        return UserIdentities.USER_IDENTITIES.USER_ID;
    }

    @Override
    public String component1() {
        return getIdentityType();
    }

    @Override
    public String component2() {
        return getIdentityId();
    }

    @Override
    public Integer component3() {
        return getUserId();
    }

    @Override
    public String value1() {
        return getIdentityType();
    }

    @Override
    public String value2() {
        return getIdentityId();
    }

    @Override
    public Integer value3() {
        return getUserId();
    }

    @Override
    public UserIdentitiesRecord value1(String value) {
        setIdentityType(value);
        return this;
    }

    @Override
    public UserIdentitiesRecord value2(String value) {
        setIdentityId(value);
        return this;
    }

    @Override
    public UserIdentitiesRecord value3(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserIdentitiesRecord values(String value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserIdentitiesRecord
     */
    public UserIdentitiesRecord() {
        super(UserIdentities.USER_IDENTITIES);
    }

    /**
     * Create a detached, initialised UserIdentitiesRecord
     */
    public UserIdentitiesRecord(String identityType, String identityId, Integer userId) {
        super(UserIdentities.USER_IDENTITIES);

        set(0, identityType);
        set(1, identityId);
        set(2, userId);
    }
}
