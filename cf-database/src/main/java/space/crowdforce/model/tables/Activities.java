/*
 * This file is generated by jOOQ.
 */
package space.crowdforce.model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import space.crowdforce.model.Keys;
import space.crowdforce.model.Public;
import space.crowdforce.model.tables.records.ActivitiesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Activities extends TableImpl<ActivitiesRecord> {

    private static final long serialVersionUID = -418119011;

    /**
     * The reference instance of <code>public.activities</code>
     */
    public static final Activities ACTIVITIES = new Activities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivitiesRecord> getRecordType() {
        return ActivitiesRecord.class;
    }

    /**
     * The column <code>public.activities.id</code>.
     */
    public final TableField<ActivitiesRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('activities_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.activities.name</code>.
     */
    public final TableField<ActivitiesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.activities.description</code>.
     */
    public final TableField<ActivitiesRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.activities.creation_time</code>.
     */
    public final TableField<ActivitiesRecord, LocalDateTime> CREATION_TIME = createField(DSL.name("creation_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.activities.start_time</code>.
     */
    public final TableField<ActivitiesRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.activities.end_time</code>.
     */
    public final TableField<ActivitiesRecord, LocalDateTime> END_TIME = createField(DSL.name("end_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.activities.project_id</code>.
     */
    public final TableField<ActivitiesRecord, Integer> PROJECT_ID = createField(DSL.name("project_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.activities</code> table reference
     */
    public Activities() {
        this(DSL.name("activities"), null);
    }

    /**
     * Create an aliased <code>public.activities</code> table reference
     */
    public Activities(String alias) {
        this(DSL.name(alias), ACTIVITIES);
    }

    /**
     * Create an aliased <code>public.activities</code> table reference
     */
    public Activities(Name alias) {
        this(alias, ACTIVITIES);
    }

    private Activities(Name alias, Table<ActivitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Activities(Name alias, Table<ActivitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Activities(Table<O> child, ForeignKey<O, ActivitiesRecord> key) {
        super(child, key, ACTIVITIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ActivitiesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACTIVITIES;
    }

    @Override
    public UniqueKey<ActivitiesRecord> getPrimaryKey() {
        return Keys.ACTIVITIES_PKEY;
    }

    @Override
    public List<UniqueKey<ActivitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<ActivitiesRecord>>asList(Keys.ACTIVITIES_PKEY, Keys.ACTIVITIES_NAME_KEY);
    }

    @Override
    public List<ForeignKey<ActivitiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ActivitiesRecord, ?>>asList(Keys.ACTIVITIES__ACTIVITIES_PROJECT_ID_FKEY);
    }

    public Projects projects() {
        return new Projects(this, Keys.ACTIVITIES__ACTIVITIES_PROJECT_ID_FKEY);
    }

    @Override
    public Activities as(String alias) {
        return new Activities(DSL.name(alias), this);
    }

    @Override
    public Activities as(Name alias) {
        return new Activities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activities rename(String name) {
        return new Activities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activities rename(Name name) {
        return new Activities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, LocalDateTime, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
