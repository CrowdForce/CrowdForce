/*
 * This file is generated by jOOQ.
 */
package space.crowdforce.model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import space.crowdforce.model.Keys;
import space.crowdforce.model.Public;
import space.crowdforce.model.tables.records.UserCodesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserCodes extends TableImpl<UserCodesRecord> {

    private static final long serialVersionUID = -868294223;

    /**
     * The reference instance of <code>public.user_codes</code>
     */
    public static final UserCodes USER_CODES = new UserCodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserCodesRecord> getRecordType() {
        return UserCodesRecord.class;
    }

    /**
     * The column <code>public.user_codes.user_id</code>.
     */
    public final TableField<UserCodesRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_codes.code</code>.
     */
    public final TableField<UserCodesRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>public.user_codes.creation_time</code>.
     */
    public final TableField<UserCodesRecord, LocalDateTime> CREATION_TIME = createField(DSL.name("creation_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.user_codes</code> table reference
     */
    public UserCodes() {
        this(DSL.name("user_codes"), null);
    }

    /**
     * Create an aliased <code>public.user_codes</code> table reference
     */
    public UserCodes(String alias) {
        this(DSL.name(alias), USER_CODES);
    }

    /**
     * Create an aliased <code>public.user_codes</code> table reference
     */
    public UserCodes(Name alias) {
        this(alias, USER_CODES);
    }

    private UserCodes(Name alias, Table<UserCodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserCodes(Name alias, Table<UserCodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserCodes(Table<O> child, ForeignKey<O, UserCodesRecord> key) {
        super(child, key, USER_CODES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<UserCodesRecord>> getKeys() {
        return Arrays.<UniqueKey<UserCodesRecord>>asList(Keys.USER_CODES_USER_ID_KEY);
    }

    @Override
    public List<ForeignKey<UserCodesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserCodesRecord, ?>>asList(Keys.USER_CODES__USER_CODES_USER_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.USER_CODES__USER_CODES_USER_ID_FKEY);
    }

    @Override
    public UserCodes as(String alias) {
        return new UserCodes(DSL.name(alias), this);
    }

    @Override
    public UserCodes as(Name alias) {
        return new UserCodes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserCodes rename(String name) {
        return new UserCodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserCodes rename(Name name) {
        return new UserCodes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
