/*
 * This file is generated by jOOQ.
 */
package space.crowdforce.model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import space.crowdforce.jooq.PostgisPointBinding;
import space.crowdforce.jooq.geo.PGPoint;
import space.crowdforce.model.Keys;
import space.crowdforce.model.Public;
import space.crowdforce.model.tables.records.ProjectsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Projects extends TableImpl<ProjectsRecord> {

    private static final long serialVersionUID = 244956546;

    /**
     * The reference instance of <code>public.projects</code>
     */
    public static final Projects PROJECTS = new Projects();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectsRecord> getRecordType() {
        return ProjectsRecord.class;
    }

    /**
     * The column <code>public.projects.id</code>.
     */
    public final TableField<ProjectsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('projects_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.projects.name</code>.
     */
    public final TableField<ProjectsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.projects.location</code>.
     */
    public final TableField<ProjectsRecord, PGPoint> LOCATION = createField(DSL.name("location"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"point\""), this, "", new PostgisPointBinding());

    /**
     * The column <code>public.projects.description</code>.
     */
    public final TableField<ProjectsRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.projects.creation_time</code>.
     */
    public final TableField<ProjectsRecord, LocalDateTime> CREATION_TIME = createField(DSL.name("creation_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.projects.owner_id</code>.
     */
    public final TableField<ProjectsRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.projects</code> table reference
     */
    public Projects() {
        this(DSL.name("projects"), null);
    }

    /**
     * Create an aliased <code>public.projects</code> table reference
     */
    public Projects(String alias) {
        this(DSL.name(alias), PROJECTS);
    }

    /**
     * Create an aliased <code>public.projects</code> table reference
     */
    public Projects(Name alias) {
        this(alias, PROJECTS);
    }

    private Projects(Name alias, Table<ProjectsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projects(Name alias, Table<ProjectsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Projects(Table<O> child, ForeignKey<O, ProjectsRecord> key) {
        super(child, key, PROJECTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ProjectsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROJECTS;
    }

    @Override
    public UniqueKey<ProjectsRecord> getPrimaryKey() {
        return Keys.PROJECTS_PKEY;
    }

    @Override
    public List<UniqueKey<ProjectsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectsRecord>>asList(Keys.PROJECTS_PKEY, Keys.PROJECTS_NAME_KEY);
    }

    @Override
    public List<ForeignKey<ProjectsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProjectsRecord, ?>>asList(Keys.PROJECTS__PROJECTS_OWNER_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.PROJECTS__PROJECTS_OWNER_ID_FKEY);
    }

    @Override
    public Projects as(String alias) {
        return new Projects(DSL.name(alias), this);
    }

    @Override
    public Projects as(Name alias) {
        return new Projects(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(String name) {
        return new Projects(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projects rename(Name name) {
        return new Projects(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, PGPoint, String, LocalDateTime, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
