/*
 * This file is generated by jOOQ.
 */
package space.crowdforce.model.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import space.crowdforce.model.Keys;
import space.crowdforce.model.Public;
import space.crowdforce.model.tables.records.TrackableItemEventPrototypeRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrackableItemEventPrototype extends TableImpl<TrackableItemEventPrototypeRecord> {

    private static final long serialVersionUID = 321569067;

    /**
     * The reference instance of <code>public.trackable_item_event_prototype</code>
     */
    public static final TrackableItemEventPrototype TRACKABLE_ITEM_EVENT_PROTOTYPE = new TrackableItemEventPrototype();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrackableItemEventPrototypeRecord> getRecordType() {
        return TrackableItemEventPrototypeRecord.class;
    }

    /**
     * The column <code>public.trackable_item_event_prototype.id</code>.
     */
    public final TableField<TrackableItemEventPrototypeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('trackable_item_event_prototype_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.trackable_item_event_prototype.message</code>.
     */
    public final TableField<TrackableItemEventPrototypeRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.trackable_item_event_prototype.start_time</code>.
     */
    public final TableField<TrackableItemEventPrototypeRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.trackable_item_event_prototype.recurring</code>.
     */
    public final TableField<TrackableItemEventPrototypeRecord, String> RECURRING = createField(DSL.name("recurring"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.trackable_item_event_prototype.trackable_item_id</code>.
     */
    public final TableField<TrackableItemEventPrototypeRecord, Integer> TRACKABLE_ITEM_ID = createField(DSL.name("trackable_item_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.trackable_item_event_prototype</code> table reference
     */
    public TrackableItemEventPrototype() {
        this(DSL.name("trackable_item_event_prototype"), null);
    }

    /**
     * Create an aliased <code>public.trackable_item_event_prototype</code> table reference
     */
    public TrackableItemEventPrototype(String alias) {
        this(DSL.name(alias), TRACKABLE_ITEM_EVENT_PROTOTYPE);
    }

    /**
     * Create an aliased <code>public.trackable_item_event_prototype</code> table reference
     */
    public TrackableItemEventPrototype(Name alias) {
        this(alias, TRACKABLE_ITEM_EVENT_PROTOTYPE);
    }

    private TrackableItemEventPrototype(Name alias, Table<TrackableItemEventPrototypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrackableItemEventPrototype(Name alias, Table<TrackableItemEventPrototypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TrackableItemEventPrototype(Table<O> child, ForeignKey<O, TrackableItemEventPrototypeRecord> key) {
        super(child, key, TRACKABLE_ITEM_EVENT_PROTOTYPE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TrackableItemEventPrototypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TRACKABLE_ITEM_EVENT_PROTOTYPE;
    }

    @Override
    public UniqueKey<TrackableItemEventPrototypeRecord> getPrimaryKey() {
        return Keys.TRACKABLE_ITEM_EVENT_PROTOTYPE_PKEY;
    }

    @Override
    public List<UniqueKey<TrackableItemEventPrototypeRecord>> getKeys() {
        return Arrays.<UniqueKey<TrackableItemEventPrototypeRecord>>asList(Keys.TRACKABLE_ITEM_EVENT_PROTOTYPE_PKEY);
    }

    @Override
    public List<ForeignKey<TrackableItemEventPrototypeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TrackableItemEventPrototypeRecord, ?>>asList(Keys.TRACKABLE_ITEM_EVENT_PROTOTYPE__TRACKABLE_ITEM_EVENT_PROTOTYPE_TRACKABLE_ITEM_ID_FKEY);
    }

    public TrackableItem trackableItem() {
        return new TrackableItem(this, Keys.TRACKABLE_ITEM_EVENT_PROTOTYPE__TRACKABLE_ITEM_EVENT_PROTOTYPE_TRACKABLE_ITEM_ID_FKEY);
    }

    @Override
    public TrackableItemEventPrototype as(String alias) {
        return new TrackableItemEventPrototype(DSL.name(alias), this);
    }

    @Override
    public TrackableItemEventPrototype as(Name alias) {
        return new TrackableItemEventPrototype(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrackableItemEventPrototype rename(String name) {
        return new TrackableItemEventPrototype(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrackableItemEventPrototype rename(Name name) {
        return new TrackableItemEventPrototype(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, LocalDateTime, String, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
